// Last Modified: 2025-09-18T02:42:00.917Z
import ReactDOM from 'react-dom';
import React, { useState, useEffect, useRef } from 'react';
import Box from '@mui/material/Box';
import TextField from '@mui/material/TextField';
import MenuItem from '@mui/material/MenuItem';
import Button from '@mui/material/Button';
import Grid from '@mui/material/Grid';
import Dialog from '@mui/material/Dialog';

import { AgGridReact } from "ag-grid-react";
import "ag-grid-community/styles/ag-grid.css";
import "ag-grid-community/styles/ag-theme-alpine.css";

// 2️⃣ Import AG Grid modules         
import { ModuleRegistry } from "ag-grid-community";
import { MasterDetailModule } from "ag-grid-enterprise";

import { LicenseManager } from "ag-grid-enterprise";
LicenseManager.setLicenseKey("Using_this_{AG_Grid}_Enterprise_key_{AG-058194}_in_excess_of_the_licence_granted_is_not_permitted___Please_report_misuse_to_legal@ag-grid.com___For_help_with_changing_this_key_please_contact_info@ag-grid.com___{LambdaZen,_Inc.}_is_granted_a_{Single_Application}_Developer_License_for_the_application_{Smart_Solutions_(Cold_Chain_Technology)}_only_for_{1}_Front-End_JavaScript_developer___All_Front-End_JavaScript_developers_working_on_{Smart_Solutions_(Cold_Chain_Technology)}_need_to_be_licensed___{Smart_Solutions_(Cold_Chain_Technology)}_has_been_granted_a_Deployment_License_Add-on_for_{1}_Production_Environment___This_key_works_with_{AG_Grid}_Enterprise_versions_released_before_{22_June_2025}____[v3]_[01]_MTc1MDU0NjgwMDAwMA==608ead4998a0fd46cb093a9d441c499c");

import { Wrapper } from "@googlemaps/react-wrapper";

import {
  FormControl,
  InputLabel,
  Select,
  Checkbox,
  ListItemText,
  OutlinedInput, // For a more visually distinct input
} from '@mui/material';

// 4️⃣ Register the modules
ModuleRegistry.registerModules([MasterDetailModule]);


const GoogleMapComponent = ({ latitude, longitude }) => {
  const mapRef = React.useRef(null);  //Declare a mapRef variable for tracking div to setup map. Inital value null
  const [map, setMap] = React.useState(null); //Declared a state variable 
  const [ready, setReady] = React.useState(false); //Declared a state called ready.Setup Ready for endering.


  React.useEffect(() => {  //First UseEffect  
    if (!ready || !mapRef.current || !window.google || map) return; //Do not proceed with this useEffecr if ready is false OR mapRef.current is null OR window.google is null OR when map is defined)
    console.log("In the first UseEffect");
    const pos = { lat: parseFloat(latitude), lng: parseFloat(longitude) }; // Position is defined using the lattitude and longitude values.
    const m = new window.google.maps.Map(mapRef.current, {
      center: pos,
      zoom: 15,
      mapTypeId: "roadmap",
    }); //Creating a Google map object with input coordinates,with suitable zoom and maptype and passing mapRef.current(ref of div where map to set)
    setMap(m); //Storing the content of map to state "map"
  }, [ready, map]); //Dependenices ready and map when they change,useEffect is triggered.

  React.useEffect(() => {  //2nd useEffect triggered when the lattitude and longitude as well as the map changes.
    //First useEffect does'nt account to change in lattitude and longitude values
    if (!map) return; //If map is null, exit from useEffect
    console.log("In the second UseEffect");
    const pos = { lat: parseFloat(latitude), lng: parseFloat(longitude) };
    map.setCenter(pos); //Position the google map focussing on the marker
    new window.google.maps.Marker({ position: pos, map: map }); //Setting the map marker on this speciifc loc
  }, [latitude, longitude, map]);
  return (
    <Wrapper //Returns GOogle MAp Wrapper for render
      apiKey="AIzaSyDXekPtnvpUFKDa-ZwFBrb7ExAsfeDbkiA" //Google MAp access using this APi key
      render={(status) => <StatusBridge status={status} onReady={setReady} />}  //Passes a prop render. render accepts a function such function takes a paramter status and returns a component StatusBridge 
    //Parameter 
    >
      {ready && <div ref={mapRef} style={{ height: 600, width: "100vw" }} />}
    </Wrapper>
  );
}


const StatusBridge = ({ status, onReady }) => { //Receives two props: status and onReady
  React.useEffect(() => { // Triggers when status or onReady Changes
    if (status === "SUCCESS") onReady(true); // If the status is SUCCESS, onReady is called with parameter true.
  }, [status, onReady]);

  if (status === "LOADING") return <div>Loading map</div>; // If status is loading, return "Loading map" string
  if (status === "FAILURE") return <div>Error loading map</div>; // If status is failure, return error string.
  return null; // SUCCESS → children render // if Status is other tahn LOADING or FAILURE (Eg: SUCCESS) null is returned 
};

const MyApp = () => {
  const [isValidShippmentId, setValidShippmentId] = React.useState({ 'validated': false, 'error': false });
  const [isValidOrganization, setValidOrganization] = React.useState({ 'validated': false, 'error': false });
  const [isValidRiskScore, setValidRiskScore] = React.useState({ 'validated': false, 'error': false });
  const [isValidStatus, setValidStatus] = React.useState({ 'validated': false, 'error': false });
  const [isButtonValid, setIsButtonValid] = React.useState(false);
  const [isValidLattitude, setisValidLattitude] = React.useState({ 'validated': false, 'error': false });
  const [isValidLongitude, setIsValidLongitude] = React.useState({ 'validated': false, 'error': false });
  const [longitudeHelptext, setLongitudeHelpText] = React.useState(null);
  const [lattitudeHelptext, setLattiitudeHelpText] = React.useState(null);
  const [shipmentIdHelperText, setShipmentIdHelperText] = React.useState(null);
  const [isValidDate, setValidDate] = React.useState({ 'validated': false, 'error': false })
  const [riskSelectorList, setRiskSelectorList] = React.useState([]);
  const [statusSelectorList, setStatusSelectorList] = React.useState([]);
  const [organizationSelectorList, setOrganizationSelectorList] = React.useState([]);
  const [regexPattern, setRegexPattern] = React.useState("");
  const [agGridTableValues, setAgGridTableValues] = React.useState([]);

  const [startdate, setStartDate] = React.useState("");
  const [enddate, setEndDate] = React.useState("");


  {/*

   const DisplayRecords=useMemo(()=>{
    if(DisplayRecord.length!=0)
    {
      if(statusSelectorList.length!0)
      {
        for(let ob of statusSelectorList)
        {
           let selected=Records.filter((item)=>item.status===ob);

        }
      }



       if(riskSelectorList.length!0)
      {
        for(let ob of statusSelectorList)
        {
           displayRecord.find(item=>item.status===ob)
           {
            continue;
           }

           else
           {
             let nr=records.filter(item=>item.shippmentId===ob.shipmentId);
            setDisplayRecord(item=>[...item,nr])
           }
        }
      }

      
    }

   },[statusSelectorList,riskSelectorList,OrgSelectorList])
  
  
  
  
  
  
  */}

  const [fields, setFields] = React.useState([]);
  const [shipmentId, setShipmentId] = React.useState("");
  const [org, setOrg] = React.useState("");
  const [date, setDate] = React.useState("");
  const [riskScore, setRiskScore] = React.useState("");
  const [status, setStatus] = React.useState("");
  const [createdAt, setcreatedAt] = React.useState("");
  const [lattitude, setLattitude] = React.useState(null);
  const [longitude, setLongitude] = React.useState(null);
  const [records, setRecords] = React.useState([]);
  const [maprecords, setMapRecords] = React.useState([]);
  const [selectedItems, setSelectedItems] = React.useState([]);
  const [displayRecord, setDisplayRecord] = React.useState([]);
  const [tableValues, setTableValues] = React.useState([]);
  const [riskoptions, setRiskOptions] = React.useState("");
  const [coordinateRecord, setCoordinateRecord] = React.useState([]);


  React.useEffect(() => {
    if (!isValidDate.error && isValidDate.validated && isValidOrganization.validated && !isValidOrganization.error && isValidShippmentId.validated && !isValidShippmentId.error && !isValidLattitude.error && isValidLattitude.validated && !isValidLongitude.error && isValidLongitude.validated && isValidStatus.validated && !isValidStatus.error && isValidRiskScore.validated && !isValidRiskScore.error) {
      setIsButtonValid(true);
    }

    else {
      setIsButtonValid(false);
    }
  }, [isValidShippmentId, isValidLattitude, isValidRiskScore, isValidOrganization, isValidStatus, isValidDate, isValidLongitude])


  /*
   React.useEffect(() => {
      if (selectedItems.length !== 0) {
        const filtered = records.filter((el) =>
          selectedItems.includes(el.org.toLowerCase())
        );
        setDisplayRecord(filtered);
      } else {
        setDisplayRecord(records);
      }
    }, [selectedItems, records]);
  
  
  */

  React.useEffect(() => {
    let filtered = [...records];

    // filter by status
    if (statusSelectorList.length !== 0) {
      filtered = filtered.filter((item) =>
        statusSelectorList.includes(item.status)
      );
    }

    // filter by risk
    if (riskSelectorList.length !== 0) {
      filtered = filtered.filter((item) =>
        riskSelectorList.includes(item.risk)
      );
    }

    // filter by org
    if (organizationSelectorList.length !== 0) {
      filtered = filtered.filter((item) =>
        organizationSelectorList.includes(item.org)
      );
    }

    if (typeof (regexPattern) === "string" && regexPattern.trim()) {
      try {
        const regex = new RegExp(regexPattern.trim(), "i");
        filtered = filtered.filter((item) => regex.test(item.shipmentId));
      }

      catch
      {
        console.log("No pair found");
      }
    }
    setDisplayRecord(filtered);

    if (startdate && enddate) {
      const st = new Date(startdate).getTime();
      const et = new Date(enddate).getTime();

      if (st < et) {
        // Filter the data based on date range
        filtered = filtered.filter((item) => {
          // Find the corresponding record using shipmentId
          const matchingRecord = records.find((record) => record.shipmentId === item.shipmentId);

          if (matchingRecord && matchingRecord.shipDate) {
            const recordTime = matchingRecord.shipDate;
            return recordTime >= st && recordTime <= et;
          }

          return false; // Exclude items without matching records or dates
        });

        // Use dateFilteredResults for your further processing
        setDisplayRecord(filtered);
      }
    }



  }
    , [statusSelectorList, riskSelectorList, organizationSelectorList, records, regexPattern, startdate, enddate]);




  React.useEffect(() => {
    const nr = displayRecord.map((item) => ({ ...item, isRowMaster: true }))
    setAgGridTableValues(nr);
    console.log("Ag grid Table value", nr);
    // console.log("**********************"); 
    // setTimeout(() => {
    //   console.log(nr);
    // }, 3000);
    // console.log("**********************");
  }, [displayRecord])

  /*
    const searchforRegex=(value)=>
    {
      if(value==="")
      {
        return rec;
      }
      value=value.trim();
      try
      {
       const rec=records;
       const regex=new RegExp(value,"i");
   
   
      }
   
      catch
      {
         return rec;
      }
   
    }  */



  const RiskDetail = ['NR', 'LR', 'MR', 'HR'];
  const orgDetail = ['Moderna', 'Paraxel', 'Pfizer', 'UVA Health Pharmacy Services', 'VPL Rx', 'DuPont'];

  const RiskMenuProps = {
    PaperProps: {
      style: {
        maxHeight: 48 * 4.4 + 10,
        width: 230
      }
    }
  }

  const OrgMenuProps = {
    PaperProps: {
      style: {
        maxHeight: 48 * 7 + 10,
        width: 230
      }
    }
  }

  const HandleRiskOptions = (event) => {
    const { target: { riskValue } } = event;
    setRiskOptions(typeof (riskValue) === 'string' ? riskValue.split(',') : riskValue);
  }

  const handleOrgOptions = (event) => {
    const { target: { value } } = event;
    setOrganizationSelectorList(typeof (value) === 'string' ? value.split(',') : value);
  }

  const StatusMenuProps = {
    PaperProps: {
      style: {
        maxHeight: 4.4 * 48 + 10,
        width: 230
      }
    }
  }

  const handleStatusChanges = (event) => {
    const { target: { value } } = event;
    setStatusSelectorList(typeof (value) === 'string' ? value.split(',') : value);

  }


  const statusOptions = ['Scheduled', 'Completed', 'In Network'];


  const getShippingTime = (date) => {
    let d = new Date(date);
    setDate(d.getTime());
    let epochtime = new Date().getTime();
    setcreatedAt(epochtime);
    return;
  }

  const displayMap = (props) => {
    console.log("display Map log");
    //<MyMap latitude={40.6892} longitude={-74.0445} />
    return (
      <div style={{ padding: "10px", border: "2px solid black" }}>
        <p>Shipment ID: {props.data.shipmentId}</p>
        <p>Status: {props.data.status}</p>
      </div>
    );
  };

  const mutliDatePicker = (startdate, enddate) => {
    var reco_local = displayRecord;
    const starttime = new Date(starttime).getTime();
    const enddtime = new Date(enddate).getTime();
    if (reco_local.length != 0) {
      reco_local.filter((item) => item.date >= startdate && item.date <= enddate);
      setDisplayRecord(reco_local);
    }

    else {

    }

  }


  const reset = () => {
    setRiskScore("");
    setLattitude(null);
    setLongitude(null);
    setOrg("");
    setShipmentId("");
    setStatus("");
    setDate("");
    setcreatedAt("");
  }
  const UIShippingIdCheck = (value) => {
    let pattern = /^[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}$/

    if (pattern.test(value) == false) {
      setValidShippmentId({ 'validated': true, 'error': true });
      setShipmentIdHelperText("16 alphanumeric characters must");

    }

    else {

      setShipmentId(value);
      setShipmentIdHelperText(null);
      APIShippingIdCheck(value);
    }
  }



  const APIShippingIdCheck = (value) => {
    $cjs.cjsRESTAPICall({
      "type": "POST",
      "data": { value },
      "url": '/lzsample/map-moor/icb_m4b7XH8vBqqk0FrzMB/valid/ShippmentId',
      done: (r) => {
        if (r.exists == true) {
          //console.log("The nAMe already exists");
          setShipmentIdHelperText("The Name Exists Already");
          setValidShippmentId({ 'validated': true, 'error': true });
        }

        else {
          setValidShippmentId({ 'validated': true, 'error': false });
          setShipmentIdHelperText(null)
        }
      },
      fail: () => {
        setValidShippmentId({ 'validated': true, 'error': true });
        setShipmentIdHelperText("Error in checking th")

      }
    })




  }


  const UIOrganizationCheck = (value) => {
    let pattern = /^[a-zA-Z0-9][a-zA-Z0-9'@#$ ]*$/

    if (pattern.test(value) == false) {
      setValidOrganization({ 'validated': false, 'error': true });

    }

    else {

      setValidOrganization({ 'validated': true, 'error': false });

    }

  }


  const UIValidRiskScoreCheck = (value) => {
    let choice = value.toLowerCase();
    if (choice === 'lr' || choice === 'mr' || choice === 'hr' || choice === 'nr') {
      setValidRiskScore({ 'validated': true, 'error': false });
    }


    else {
      setValidRiskScore({ 'validated': true, 'error': true });
    }

  }


  const UILongitudeValidation = (value) => {
    if (value == "") {
      setIsValidLongitude({ 'validated': true, 'error': true });
      setLongitudeHelpText("The longitude must be an integer value");
    }

    else if (value > 180 || value < -180) {
      setIsValidLongitude({ 'validated': true, 'error': true });
      setLongitudeHelpText("The longitude must be -180 and 180");
    }

    else {
      setLongitudeHelpText(null);
      setIsValidLongitude({ 'validated': true, 'error': false });
    }

  }


  const handleFormSubmit = () => {

    const TEMPLATE_URL = "/lzsample/map-moor/IpxK0UPTQ5AkQqlIyrjJx4/";
    const DATA_URL = "/lzsample/map-moor/hPzkWO7EDiBctaNzdC_9g4/";
    //let coords={lattitude,longitude};
    const payload = { shipmentId, org, shipDate: date, riskScore, status, createdAt, coords: { lattitude: parseInt(lattitude), longitude: parseInt(longitude) } };
    console.log("Submitted Data:", payload);
    setisDialogueValid(false);
    {/*
  const [shipmentId, setShipmentId] = React.useState("");
  const [org, setOrg] = React.useState("");
  const [date, setDate] = React.useState("");
  const [riskScore, setRiskScore] = React.useState("");
  const [status, setStatus] = React.useState("");
  const [createdAt, setcreatedAt] = React.useState("");
  const [lattitude, setLattitude] = React.useState(0);
  const [longitude, setLongitude] = React.useState(0);   */}

    $cjs.concept({
      action: "CREATE",
      templateUri: TEMPLATE_URL, // todo-template-uri
      concept: {
        parent: DATA_URL, //uri of data folder
        name: payload.shipmentId,//name of file
        category: "ordersData", //use any category name
        properties: {
          ShippingTemplate: payload //here, todo is the propertyName pointing to the lambda concept in the template concept; newTodo is the values to be populated in the concept
        }
      },
      done: (uri) => {
        //console.log('uri', uri);
      },
      fail: function (error) {
        //console.log("creation call failed, error:" + error);
      }
    });

    reset();

    setTimeout(() => {
      fetchRecords();
    }, 2000);
    setIsButtonValid(false);
  }








  React.useEffect(() => { getTableFields(); }, []);
  React.useEffect(() => { fetchRecords(); }, []);


  const fetchRecords = () => {
    $cjs.cjsRESTAPICall({
      type: "GET",
      url: '/lzsample/map-moor/icb_m4b7XH8vBqqk0FrzMB/shipping/values',
      done: (r) => {
        console.log(r);
        let tablerecords = r.map((item) => ({ "shipmentId": item.shipmentId, "org": item.org, "riskScore": item.riskScore, "status": item.status, isRowMaster: true }));
        let fullRecords = r.map((item) => ({ "shipmentId": item.shipmentId, "org": item.org, "riskScore": item.riskScore, "status": item.status, "shipDate": item.shipDate, "lattitude": item.lattitude, "longitude": item.longitude }));
        setRecords(fullRecords);
        console.log(fullRecords);
        setDisplayRecord(tablerecords);
        //console.log(tablerecords);
        //let mr = r.map((item) => ({ "shipmentId": item.shipmentId, "lattitude": item.lattitude, "longitude": item.longitude }));
        //setCoordinateRecord()
        let mr = r.reduce((acc, item) => {
          acc[item.shipmentId] = {
            latitude: item.lattitude,   // keep consistent spelling!
            longitude: item.longitude
          };
          return acc;
        }, {});

        console.log("the map records", mr);
        setMapRecords(mr);
      },
      fail: () => { console.log("Error"); }
    })


  }


  const getTableFields = () => {
    $cjs.cjsRESTAPICall({
      type: "GET",
      url: '/lzsample/map-moor/icb_m4b7XH8vBqqk0FrzMB/Shipping/tableFields',
      done: (r) => {
        //console.log(r);
        let fieldValues = [];
        for (let item of r) {
          if (item.field == "shipmentId") {
            const vals = { "field": item.field, "headerName": item.headerName, cellRenderer: 'agGroupCellRenderer' };
            fieldValues.push(vals);
          }

          else {
            const vals = { "field": item.field, "headerName": item.headerName };
            fieldValues.push(vals);
          }
        }
        //console.log(fieldValues);
        setFields(fieldValues);
      },
      fail: () => { console.log("Error"); }
    })

  }

  const [isDialogueValid, setisDialogueValid] = React.useState(false);
  const buttonRef = React.useRef(null);



  const handleClick = () => {
    setisDialogueValid(true);
  }

  const onClose = () => {
    setisDialogueValid(false);
  }

  {/*
  const handleFormSubmit = () => {
    setisDialogueValid(false);
  }      */}

  const anchorEl = () => {
    return buttonRef.current;

  }


  const items = [
    { id: 'moderna', name: 'Moderna' },
    { id: 'paraxel', name: 'Paraxel' },
    { id: 'uva health pharmacy services', name: 'UVA Health Pharmacy Services' },
    { id: 'vpl rx', name: 'VPL Rx' },
    { id: 'dupont', name: 'DuPont' },
    { id: 'pfizer', name: 'Pfizer' }
  ];

  const handleChangeOrgSelector = (event) => {
    const {
      target: { value },
    } = event;
    setSelectedItems(
      // On autofill we get a stringified value.
      typeof value === 'string' ? value.split(',') : value,
    );
  };


  const Riskitems = [
    { id: 'LR', name: 'Low Risk' },
    { id: 'HR', name: 'High Risk' },
    { id: 'MR', name: 'Moderate Risk' },
    { id: 'NR', name: 'No Risk' },
  ];

  const handleChangeRiskSelector = (event) => {
    const {
      target: { value },
    } = event;
    setRiskSelectorList(
      // On autofill we get a stringified value.
      typeof value === 'string' ? value.split(',') : value,
    );
  };

  {/*
  function MyMap({ latitude, longitude,self=React}) {
    const [pos, setPos] = React.useState({});
    const position = { lat: parseFloat(latitude), lng: parseFloat(longitude) };
    React.useEffect(() => {
      console.log("Running React.useEffect No.1");
      setPos({ lat: parseFloat(latitude), lng: parseFloat(longitude) });
    }, [latitude, longitude]);

    const mapRef = React.useRef(null); // <-- this was missing
    const [mapInstance, setMapInstance] = React.useState(null);
    React.useEffect(() => {
      console.log("Running React.useEffect No.2");
      if (mapRef.current && window.google) {
        // Create the map in your existing div
        const map = new window.google.maps.Map(mapRef.current, {
          center: pos,
          zoom: 15,
          mapTypeId: "roadmap",
        });

        // Add a marker at the position
        new window.google.maps.Marker({
          position: pos,
          map: map,
          title: "Thiruvananthapuram, Kerala",
        });
      }
    }, [latitude, longitude, position, mapRef]);
    return (
      <Wrapper
        apiKey="AIzaSyDXekPtnvpUFKDa-ZwFBrb7ExAsfeDbkiA"
        render={(status) => {
          if (status === "LOADING") return <div>Loading map...</div>;
          if (status === "FAILURE") return <div>Error loading map</div>;
          return null;
        }}
      >
        <div
          ref={mapRef}
          style={{ height: "600px", width: "100vw", border: "1px solid" }}
        >
          {/* Google Maps will render inside this div *
        </div>
      </Wrapper>
    );
  }   */}

  {/*
  function GoogleMapComponent({ latitude, longitude }) {
    const [pos, setPos] = React.useState({});
    const mapRef = React.useRef(null);
    const [mapInstance, setMapInstance] = React.useState(null);

    React.useEffect(() => {
      console.log("Running React.useEffect No.1");
      setPos({ lat: parseFloat(latitude), lng: parseFloat(longitude) });
    }, [latitude, longitude]);

    React.useEffect(() => {
      console.log("Running React.useEffect No.2");
      if (mapRef.current && window.google && pos.lat && pos.lng) {
        // Create the map in your existing div
        const map = new window.google.maps.Map(mapRef.current, {
          center: pos,
          zoom: 15,
          mapTypeId: "roadmap",
        });

        // Add a marker at the position
        new window.google.maps.Marker({
          position: pos,
          map: map,
          title: "Thiruvananthapuram, Kerala",
        });

        setMapInstance(map);
      }
    }, [pos]);

    <Wrapper
      apiKey="AIzaSyDXekPtnvpUFKDa-ZwFBrb7ExAsfeDbkiA"
      render={(status) => {
        if (status === "LOADING") return <div>Loading map...</div>;
        if (status === "FAILURE") return <div>Error loading map</div>;
        return null;
      }}
    >
      <div
        ref={mapRef}
        style={{ height: "600px", width: "100vw", border: "1px solid" }}
      >
        {/* Google Maps will render inside this div 
    </div>
  </Wrapper>   ignore wrapper

    return (
      null
    );
  }  

  function MyMap({ latitude, longitude }) {
    return (
      <GoogleMapComponent latitude={latitude} longitude={longitude} />
    );
  }   */}


  return (
    <>
      <Grid sx={{ marginLeft: "37vw" }}>
        <h1>Shipment Tracking</h1>
      </Grid>
      <Grid sx={{ display: "flex", flexDirection: "row" }}>
        <Grid>
          <TextField
            sx={{ width: 300, m: 1 }}
            label="Search for an Id"
            value={regexPattern}
            onChange={(e) => {
              if (e.target.value) {
                setRegexPattern(e.target.value);
              }

              else {
                setRegexPattern("");
              }
            }}

          />


        </Grid>


        <Grid>
          <FormControl sx={{ m: 1, width: 300 }}>
            <InputLabel id="multi-select-checkbox-label">Organizations</InputLabel>
            <Select
              labelId="multi-select-checkbox-label"
              id="multi-select-checkbox"
              multiple
              value={organizationSelectorList}
              onChange={handleOrgOptions}
              input={<OutlinedInput label="Organizations" />}
              renderValue={(selected) =>
                selected.join(",")
              }
              MenuProps={OrgMenuProps}
            >
              {orgDetail.map((value) => (
                <MenuItem key={value} value={value}>
                  <Checkbox checked={organizationSelectorList.includes(value)} />
                  <ListItemText primary={value} />
                </MenuItem>
              ))}
            </Select>
          </FormControl>
        </Grid>


        <Grid>
          <FormControl sx={{ m: 1, width: 300 }}>
            <InputLabel id="risk-options-label">Risks</InputLabel>
            <Select
              multiple
              value={riskSelectorList}
              id="Risk-options-list"
              labelId="risk-options-label"
              onChange={handleChangeRiskSelector}
              renderValue={(items) => items.join(',')}
              MenuProps={RiskMenuProps}
              input={<OutlinedInput label="Risks" />}
            >
              {
                RiskDetail.map((value) => (
                  <MenuItem value={value} key={value}>
                    <ListItemText primary={value} />
                    <Checkbox checked={riskSelectorList.includes(value)} />
                  </MenuItem>
                ))
              }
            </Select>
          </FormControl>
        </Grid>

        <Grid>
          <FormControl sx={{ width: 300, m: 1 }}>
            <InputLabel id="Status-list">Status</InputLabel>
            <Select
              multiple
              id="Status-Selector"
              labelId="Status-list"
              value={statusSelectorList}
              onChange={handleStatusChanges}
              renderValue={(items) => items.join(',')}
              input={<OutlinedInput label="Status" />}
              MenuProps={StatusMenuProps}>
              {
                statusOptions.map((item) => (
                  <MenuItem key={item} value={item}>
                    <ListItemText primary={item} />
                    <Checkbox checked={statusSelectorList.includes(item)} />
                  </MenuItem>
                ))}
            </Select>
          </FormControl>
        </Grid>



        <Grid>

          <Grid sx={{ display: "flex", gap: "3vw" }}>
            <Grid>
              <TextField label="Start Date"
                fullWidth
                name="StartDate"
                type="date"
                sx={{ width: 300, m: 1 }}
                inputProps={{
                  max: enddate ? enddate : new Date().toISOString().split("T")[0]
                  // Restricts to today's date if no enddate
                }}
                value={startdate}
                InputLabelProps={{ shrink: true }}
                onChange={
                  (e) => {
                    const newValue = e.target.value;
                    //console.log("New date value:", newValue); // Fixed: log the actual new value
                    if (newValue) {
                      setStartDate(newValue);
                    }

                    else {
                      setStartDate('');
                    }

                  }
                }
              />
            </Grid>
          </Grid>



          <Grid>
            <TextField label="End Date"
              fullWidth
              sx={{ width: 300, m: 1 }}
              name="EndDate"
              type="date"
              inputProps={{
                max: new Date().toISOString().split('T')[0] // Restricts to today's date
              }}
              value={enddate}
              InputLabelProps={{ shrink: true }}
              onChange={
                (e) => {
                  const newValue = e.target.value;
                  //console.log("New date value:", newValue); // Fixed: log the actual new value
                  if (newValue) {
                    setEndDate(newValue);
                  }

                  else {
                    setEndDate('');
                  }

                }
              }
            />
          </Grid>

        </Grid>


        <Grid sx={{ marginLeft: "1vw", marginBottom: "1vh" }}>
          <Button ref={buttonRef} onClick={handleClick} variant="contained" color="primary" sx={{ padding: '10px 20px' }} >Add an order</Button>
        </Grid>



      </Grid> // maingrid







      <Dialog
        open={isDialogueValid}
        onClose={onClose}
      >

        {/*************************************/}
        <Grid container component="form" direction="column" spacing={2} sx={{ padding: 1, width: "25vw" }} >
          {/* Row 1: Shipment ID, Organization */}
          <Grid item xs={12} sm={6} md={6} lg={6}>
            <TextField
              fullWidth
              name="shipmentId"
              label="Shipment ID"
              value={shipmentId}
              helperText={shipmentIdHelperText}
              sx={{
                '& .MuiOutlinedInput-root': {
                  '& fieldset, &:hover fieldset, &.Mui-focused fieldset': {
                    borderColor: !isValidShippmentId.validated ? '#B4B1B3' : isValidShippmentId.error ? 'red' : 'green'
                  }
                }
              }}
              inputProps={{ pattern: "^[0-9a-zA-Z]*$" }}
              onChange={(e) => { setShipmentId(e.target.value.toUpperCase()) }}
              onBlur={(e) => { UIShippingIdCheck(e.target.value); }}
              onKeyDown={(e) => {
                if (e.key === "Enter") { { UIShippingIdCheck(e.target.value); } }
              }}

            />
          </Grid>

          <Grid item xs={12} sm={6} md={6} lg={6}>
            <TextField
              fullWidth
              select
              name="Organization"
              label="Organization"
              value={org}
              onChange={(e) => { setOrg(e.target.value); setValidOrganization({ "validated": true, "error": false }); }}
            >
              <MenuItem value="Moderna">Moderna</MenuItem>
              <MenuItem value="Paraxel">Paraxel</MenuItem>
              <MenuItem value="Pfizer">Pfizer</MenuItem>
              <MenuItem value="UVA Health Pharmacy Services">UVA Health Pharmacy Services</MenuItem>
              <MenuItem value="VPL Rx">VPL Rx</MenuItem>
              <MenuItem value="DuPont">DuPont</MenuItem>
            </TextField>
          </Grid>

          {/* Row 2: Shipping Date, Risk Category */}
          <Grid item xs={12} sm={6} md={6} lg={6}>
            <TextField
              fullWidth
              label="Shipping Date"
              name="shipDate"
              type="date"
              InputLabelProps={{ shrink: true }}
              inputProps={{
                max: new Date().toISOString().split('T')[0] // Restricts to today's date
              }}
              onChange={(e) => {
                if (e.target.value) {
                  getShippingTime(e.target.value);
                  setValidDate({ "validated": true, "error": false });
                }

                else {
                  setDate("");
                  setValidDate({ "validated": true, "error": true });
                }


              }}
            />
          </Grid>

          <Grid item xs={12} sm={6} md={6} lg={6}>
            <TextField
              fullWidth
              select
              label="Risk Category"
              value={riskScore}
              onChange={(e) => {
                if (e.target.value) {
                  setRiskScore(e.target.value)
                  setValidRiskScore({ "validated": true, "error": false })
                }

                else {
                  setRiskScore("");
                  setValidRiskScore({ "validated": true, "error": true })

                }
              }
              }
              onBlur={(e) => UIValidRiskScoreCheck(e.target.value)}
              onKeyDown={(e) => {
                if (e.key === "Enter") {
                  UIValidRiskScoreCheck(e.target.value);
                }
              }}
            >
              <MenuItem value="NR">NR</MenuItem>
              <MenuItem value="LR">LR</MenuItem>
              <MenuItem value="MR">MR</MenuItem>
              <MenuItem value="HR">HR</MenuItem>
            </TextField>
          </Grid>


          {/* Row 3: Status, Created By */}
          <Grid item xs={12} sm={6} md={6} lg={6}>
            <TextField
              fullWidth
              select
              label="Status"
              value={status}
              onChange={(e) => {
                if (e.target.value) {
                  setStatus(e.target.value);
                  setValidStatus({ "validated": true, "error": false })
                }

                else {
                  setValidStatus({ "validated": true, "error": true })
                }
              }}
            >
              <MenuItem value="Scheduled">Scheduled</MenuItem>
              <MenuItem value="In Network">In Network</MenuItem>
              <MenuItem value="Completed">Completed</MenuItem>
            </TextField>
          </Grid>

          {/*
            <Grid item xs={12} sm={6} md={6} lg={6}>
              <TextField
                fullWidth
                label="Created By"
                name="createdAt"
                type="date"
                InputLabelProps={{ shrink: true }}
                inputProps={{
                  max: new Date().toISOString().split('T')[0] // Restricts to today's date
                }}
                onChange={(e) => { setcreatedAt(e.target.value) }}
              />
            </Grid>   */}

          {/* Row 4: Location Fields */}
          <Grid item xs={12} sm={6} md={6} lg={6}>
            <TextField
              fullWidth
              label="Latitude"
              name="lat"
              type="number"
              value={lattitude}
              helperText={lattitudeHelptext}
              inputProps={{
                min: -90,
                max: 90
              }}
              onChange={(e) => {
                const value = parseFloat(e.target.value);
                if (isNaN(value)) { setisValidLattitude({ 'validated': true, 'error': true }); setLattitude(""); setLattiitudeHelpText("Lattitude must be a number "); }
                else if (value < -90 || value > 90) { setisValidLattitude({ 'validated': true, 'error': true }); setLattitude(""); setLattiitudeHelpText("Lattitude must be greater than -90 and less than 90") }
                else { setisValidLattitude({ 'validated': true, 'error': false }); setLattitude(value); setLattiitudeHelpText(null); }
              }}
            />
          </Grid>

          <Grid item xs={12} sm={6} md={6} lg={6}>
            <TextField
              fullWidth
              label="Longitude"
              name="longi"
              type="number"
              value={longitude}
              helperText={longitudeHelptext}
              inputProps={{
                min: -180,
                max: 180
              }}
              onChange={(e) => {
                if (e.target.value) {
                  setLongitude(parseFloat(e.target.value));
                }

                else {
                  setLongitude("");
                  setIsValidLongitude({ "validated": true, "error": true });
                }


              }}

              onBlur={(e) => { UILongitudeValidation(e.target.value) }}
              onKeyDown={(e) => {
                if (e.key === "Enter") {
                  UILongitudeValidation(e.target.value);
                }
              }}
            />
          </Grid>

          {/* Submit Button Row */}
          <Grid item xs={12} sx={{ display: 'flex', justifyContent: 'center', mt: 2 }}>
            <Button
              variant="contained"
              disabled={!isButtonValid}
              size="large"
              sx={{ minWidth: 120 }}
              onClick={handleFormSubmit}
            >
              Submit
            </Button>
          </Grid>

        </Grid>

      </Dialog>

      <div style={{ height: "100vh", width: "100vw"}} className="ag-theme-alpine">
        {/* //<AgGridReact rowData={agGridTableValues} columnDefs={fields} masterDetail={true} agDetailCellRenderer={displayMap} /> /*/}

        {/*
        <AgGridReact
          rowData={rowData}
          columnDefs={colDefs}
          masterDetail={true}
          detailCellRenderer={DisplayMap}   // <-- Custom component
          detailCellRendererParams={{}}     // <-- Add this to stop AG Grid from expecting detailGridOptions
        />  */}


        {/*
        <AgGridReact
          rowData={agGridTableValues}
          columnDefs={fields}
          masterDetail={true}
          detailCellRenderer={<GoogleMapComponent latitude={38.8971} longitude={-77.0365} />}
        />
      </div>*/}

        {/* 
               <AgGridReact
          rowData={agGridTableValues}
          columnDefs={fields}
          masterDetail={true}
          detailCellRenderer={GoogleMapComponent}
          detailCellRendererParams={{
            latitude: 38.8971,
            longitude: -77.0365,
          }}
        />
         
           detailCellRendererParams={(params)=>({
            latitude:maprecords[params.data.shipmentId].latitude,
            longitude:maprecords[params.data.shipmentId].longitude
          })}

         */}

        <AgGridReact
          rowData={agGridTableValues}
          columnDefs={fields}
          masterDetail={true}
          detailCellRenderer={GoogleMapComponent}
          detailCellRendererParams={(params) => {
            const record = maprecords[params.data.shipmentId];
            if (!record) {
              console.warn(`No map record found for shipmentId: ${params.data.shipmentId}`);
              return { latitude: 0, longitude: 0 };
            }
            console.log("ShipmentID", params.data.shipmentId);
            console.log("Lattitute", record.lattitude);
            console.log("Longitude", record.longitude);
            return {
              latitude: record.latitude,
              longitude: record.longitude
            };
          }}
        />







        {/* <GoogleMapComponent latitude={38.8971} longitude={-77.0365} />  */} 

        {/*
      <Grid>
        <p>Testing Map Render</p>
        <div style={{ padding: "10px", border: "2px solid black", width: "100vw", height: "600px" }}>
          <GoogleMapComponent latitude={40.6892} longitude={-74.0445} />
        </div>

      </Grid> */}

      </div>
    </>)
}




function getInitialState() {
  var ans = {};
  $('.initialState dt').each(function () {
    var key = $(this).parent().attr("id");
    var subKey = $(this).text();
    var subVal = $(this).next().text();
    if (_.isUndefined(key)) {
      ans[subKey] = subVal;
    } else {
      if (!(key in ans)) {
        ans[key] = {};
      }
      ans[key][subKey] = subVal;
    }
  });
  return ans;
}

function renderClass(tagName, props, classDef) {
  var initialState = getInitialState();
  if (props) {
    initialState = $.extend(initialState, props);
  }

  ReactDOM.render(React.createElement(classDef, initialState), document.querySelector(tagName));
}

$(function () {
  renderClass("dashboard", null, MyApp);
})
